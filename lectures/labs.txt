
                            Лабораторные работы.

    1. Вводная (ознакомительная).
    2. vi, cvs, bc, пакетные (скрипты). Задание единое.
    3. BASH.
    4. SED + BASH (find).
    5. Си: make, cc, stdio.
    6. IPC. Демоны и сигналы.
    7. IPC. Каналы и FIFO.
    8. IPC. Сокеты.

                             Лабораторная No.1.

    1. Вход/выход из системы.
    2. login имя
    3. password пароль
    4. logout, exit, ctrl+d
    5. Пользователь, его профиль, домашний каталог, справка (man
       имя_команды).
    6. Оболочка (shell): параметры команд разделяются пробелами, ключи
       команд начинаются с "-", разделитель каталогов в пути - "/", TAB в
       BASH - подстановка ввода.
    7. Навигация по файловой системе: cd, ls (-a -l), pwd
    8. Общение между пользователями: write, talk, mailx.
    9. Структура файловой системы Unix. Позапускать из /bin, /sbin
       (readme).
   10. Просмотр, создание, объединение файлов: cat, more.
   11. cat file1, cat > file1, cat file1| more, cat file1 file2 > file3.
   12. Информация о системе: who, uptime, date, uname -a, ps.
   13. Программы-фильтры: sort, grep, wc.
   14. Операции над файлами: cp, rm [dir], mv, mkdir.
   15. Понятие владелец/группа, атрибуты файла: chown, ls -l, chgrp,
       chmod).
   16. Типы файлов (обзорно), ссылки (связи) - symbolic, каталоги,
       символьные и блочные устройства.
   17. Точки монтирования, единая файловая система (FS).
   18. Интерфейс FS к периферийным устройствам (mount, /proc,
       /etc/vfstab, /etc/mnttab).

                         Лабораторная работа No.2.

    1. Редактор vi (vim). Это так называемый визуальный редактор, который
       показывает редактируемый текст на экране, в отличие от не
       визуальных (ed).

   vim - viImproved.

   Он поддерживает два основных режима: командный режим и режим ввода
   текста. Первоначально запускается командный режим.

   Команды:

    1. Вставка текста:

   a - перед курсором

   i - после курсора.

    2. Переход в командный режим из вставки текста:

   Esc.

    3. Выход:

   :wq (zz) - с сохранением

   :q! - без сохранения.

    4. Удаление и копирования:

   dd - удалить текущую строку

   p - вставить удаленную строку после курсора

   yy - копировать текущую строку

    5. Поиска:

   /текст

    6. Замены:

   :s/старый_текст/новый_текст/[g - заменить все]

    7. Несколько файлов:

   :n - next (из списка в командной строке)

    8. Склейка строк:

   j

    9. Сохранение:

   :w

   10) Переход:

   :номер - в строку <<номер>>

   :$ - в конец строки

   :^ - в начало строки

   :e файл - редактировать <<файл>>.

    2. Перенаправление ввода/вывода.

   1 > file - перенаправление стандартного вывода в file

   2>>file - добавление потока ошибок в file

   < file - вывести на стандартный ввод из file

   1 > &2 склеивание потоков

   &&, || - условное выполнение команд (код возврата).

   p1 | p2 - конвейер

   p& - запуск в фоновом режиме

   >>! - вводить до

    3. Фильтры - программы обработки текста.

   cat - прямой просмотр

   tac - обратный просмотр

   od - двоичный

   grep (egrep, fgrep)

   pr - печать текста с разделением на колонки

   head - выдача первых строк (по умолчанию 10)

   tail - выдача последних строк

   split - порезать по 1000 строк

   sort - сортировка

   paste - соединение

   uniq - удаление повторяющихся строк

   echo

   join

    4. Пакетные файлы.
    5. bc - калькулятор.

   scale=5 - количество знаков после ","

   ibase=2, obase=3 - система счисления (входные и выходные данные)

   Операторы: +, -, /, % - остаток, ^ - степень, sqrt(n) - извлечение
   корня

   */ - комментарий

   {} - группа операторов

   [] - индекс массива

   for (выражение) [операторы]

   if (выражение) [операторы] (else [опреаторы])

   while (выражение) [операторы]

   break, continue, define a(b)

   Операции:

   =+, =-, =*, =/, =^, = - присваивание

   <, >, <=, >=, ==, != - отношение

   -, ++,-- - унарные

    6. Контроль выполнения задач.

   Запуск в фоновом режиме - &.

   fg, bg (нажать Ctrl+Z и набрать bg), jobs - список фоновых задач.

   at (время), atq, atrm, batch

   nice - понижение приоритета

    7. CVS - Concurrent Version System - локально и удаленно.

   Репозитарий (хранилище). Обращение по имени каталога, файла или
   модуля.

   -m "Сообщение" (комментарий) - перейти в каталог. 

   import имя_каталога имя_программы start - начало реализации

   выходим из каталога и удаляем его

   checkout имя_каталога/проекта - получит рабочую версию

   add файл - добавляет файл/каталог в проект

   commit - фиксирование изменений и перенесение их в хранилище

   history

   log

   release -d каталог - отметить для CVS, что каталог больше не

   используется

   -d - удалить файлы

   status - информация о состоянии в рабочем каталоге

   update - привести рабочее дерево/каталог в соответствие с

   хранилищем.

                                  Задание.

    1. Создать подкаталог в домашнем каталоге с именем фамилия_инициалы.
       В нем создать подкаталог laba2.Добавить все созданные файлы в
       проект, удалить/извлечь из хранилища. В подкаталоге laba2
       выполнить задание 2. После окончания работы сохранить изменения и
       освободить каталог с удалением файлов.
    2. Создать командный файл, используя vi(m).

   Скрипт делает из собственного текста шестнадцатиричный дамп, добавляет
   к нему построчно исходный текст, снабжает результат заголовком с
   именем скрипта и подписью с текущей датой, ФИО студента, номером
   группы и подгруппы. Затем скрипт посылает этот сформированный
   файл(временный) преподавателю (имя - prepod). Для контроля вывести
   временный файл и затем удалить его. Для отладки файл посылать себе.

                         Лабораторная работа No.3.

   Написать утилиту - аналог существующей в Unix утилиты, позволяющую
   также использовать дополнительные опции.

                                 Варианты:

    1. kill по имени процесса.
    2. kill по имени владельца процесса.
    3. Генератор случайных чисел, работающий по алгоритму Лемера: (ax+b)
       % m, где a,b,m -константы, x в интервале (0,m). Результат пишется
       в файл RAND. Скрипт запускается в фоновом режиме и с интервалом 15
       секунд меняет RAND. При начальном запуске инициализируется текущим
       временем в секундах.

                         Лабораторная работа No.4.

                                 Варианты:

    1. Заменить строчные р на заглавные Р во всех строчках, где есть
       сочетание символов ch (в любом регистре). Вывести только
       измененные строки.
    2. После каждого предлога the, an, a вставить пояснение /*article
       имя_артикля*/, используя подстроки поиска.
    3. Заменить "you" на "u", "for" на "4", "to" на "2" по всему тексту.
    4. Найти слова, в которых есть 5 гласных букв (a, o, i, u, e).
    5. Вывести все строки, в которых есть числа и которые заканчиваются
       на букву "e".
    6. вывести все строки, содержащие более одной точки, и подсчитать их
       количество.
    7. Замена букв на заглавные после точки и любого количества пробелов.

                         Лабораторная работа No.5.

   Написать find [path] ["name"]. В имени могут быть символы "*" "?". При
   вызове без параметров выводится сводка использования. Если при вызове
   указывается только путь , то выводятся все файлы.

                         Лабораторная работа No.6.

                                 Варианты:

    1. Создать программу проверки и коррекции текста по словарю. Словарь
       - текстовый файл, в котором каждое слово находится в отдельной
       строке. При запуске без параметров выводит информацию о себе. Файл
       для проверки задается с клавиатуры или из файла. Результат
       проверки выводиться на экран. Исходный файл не меняется.
       Исправление производится по первому совпадающему образцу. Должен
       исправлять одиночную ошибку: лишняя/удаленная/неправильная буква -
       или две переставленные местами буквы.
    2. Создать программу - записную книжку. Данные находятся в текстовом
       файле, где каждая запись в отдельной строке. Запись состоит из
       ФИО, телефона и адреса, разделенных ":". Реализовать
       добавление/удаление записей, поиск по фамилии и телефону.

   Запуск: notebook [буква_команды] ["строка_поиска/запись"]

                         Лабораторная работа No.6.

   Написать демона. При запуске он использует конфигурационный файл,
   состоящий из трех строк вида сигнал=действие. Для действия может быть
   три варианта: IGNORE, DEFAULT, CUSTOM.

   Например: SIGINT=CUSTOM

   SIGTSTP=IGNORE

   SIGPIPE=DEFAULT

   При получении SIGHUP демон должен прочитать конфигурационный файл и
   перенастроить себя. В демоне определен один обработчик CUSTOM, который
   обрабатывает сигнал, заданный в файле.

   Для SIGHUP должен быть определен обработчик и он не должен указываться
   в конфигурационном файле.

   Обработчик CUSTOM добавляет сообщение в журнал log, содержащее время и
   номер пришедшего сигнала.

                         Лабораторная работа No.8.

                                 Варианты:

    1. Написать программу, которая порождает три дочерних процесса. Для
       каждого из них открывается канал, по которому дочерние процессы
       посылают текстовые строки. Сервер отображает их в порядке
       поступления.
    2. Написать программу, поведение которой зависит от названия. Если
       это server, то программа создает именованный канал FIFO и ждет
       прихода по нему сообщений. Сообщение - два числа, которые
       используются как аргументы функции 0x01 graphic
       . Клиент передает данные, введенные с клавиатуры. И затем сервер
       выводит полученный результат. При завершении сервер удаляет FIFO.
    3. Написать программу, первый экземпляр которой производит поиск FIFO
       с заданным именем и, не найдя его, создает такой канал и
       становится сервером. Сервер с интервалом в 1 секунду заносит в
       канал текущее время.
    4. Все последующие экземпляры программы находят этот канал и
       становятся клиентами. Они опрашивают FIFO, не удаляя информацию,
       выводят время и заканчивают работу.
    5. Сервер и клиент могут быть одной программой или разными.
    6. То же, что и вариант 3, но сервер генерирует пароли. Одновременно
       в канале может быть только один пароль. Клиент при обращении
       забирает пароль, а сервер, заметив это, записывает новый пароль.

   6

   
