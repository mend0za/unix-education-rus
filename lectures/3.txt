
             Лекция No.3. SED и регулярные выражения (regexp).

                           Регулярные выражения.

   Регулярные выражения - специальные строки символов, которые задаются
   для поиска совпадающих фрагментов текста.

   Принцип регулярных выражений расширяют принципы метасимволов. Они
   применяются в ed, vi, sed, awk, grep, perl, есть С/С++ библиотеки.

   Метасимволы:

    a. "." - любой символ за исключением пустой строки
    b. * - соответствует любому количеству символов, которые стоят перед
       ним, в том числе регулярных выражений.

   Пример: .* - любое количество любых символов; 3* - любое количество
   троек.

    c. ^ - указывает на начало строки
    d. $ - указывает на конец строки
    e. [...] - любой символ из заключенных в скобки ("-" обозначает
       интервал, ^ - инверсия (если первый символ), -и] в качестве
       первого элемента - как часть списка). 

   Пример: [abc], ^[a-c],[^a-c].

    f. \{n,m\} - несколько вхождений символа, который указан перед этим
       выражением. Количество вхождений - от n до m. m можно опустить.
       Символ может быть регулярным выражением.

   Пример: k\{3,\} - k может повторятся 3 и более раз

   k\{3,5\} - k может повторятся от 3 до 5 раз

   [a-z]{2} - 2 любые строчные буквы

    g. \ - указывает на то, что следующий символ должен рассматриваться
       как специальный, если это метасимвол, то как обычный.

   Пример: ^\. - любая строка, начинающаяся с точки.

    h. \(...\) - сохранить подстроку, заключенную между \( и \) в памяти
       для следующего использования. При разборе первой строки - до
       девяти подстрок (нумерация справа налево).
    i. \цифра - взять подстроку, сохраненную с помощью \(...\). Цифра от
       1 до 9. Самая левая подстрока - 1.
    j. & - использовать искомый текст в текущей заменяющей подстроке.

                                    SED.

   SED (sequential или stream editor) - неинтерактивный редактор текста.
   Его назначение - выполнение анализа и преобразования текста, которое
   можно произвести за один или более проходов. Имеет свой входной язык.

   Формат вызова:

   sed параметры [сценарий] [входные файлы].

   Параметры:

   -f cmdfile - прочитать сценарий из файла

   -n - блокирование вывода, кроме явно задаваемого из сценария

   Сценарий: обычно заключенная в кавычки (`') последовательность команд,
   разделенных (;).

   Входные файлы: редактируемый поток (файлы объединяются последовательно
   в единый поток со сквозной строчной нумерацией). Если их нет, то
   читается стандартный поток ввода. В тексте скрипта - текст комментария
   #. Результат выводится в стандартный поток вывода и обычно
   перенаправляется в файл или конвейер.

   Примечание: входные файлы не модифицируются.

   Схема работы:

   Входные файлы (stdin) считываются в область шаблонов (pettern buffer),
   после этого к буферу последовательно применяются команды, и затем
   результат выводится для сохранения или дальнейшей обработки.

   Замечание: настоятельно не рекомендуется перенапрвлять результат в
   исходные файлы. Это приводит к непредсказуемым результатам.

   Общий вид команды SED:

   [адрес1[, адрес2]] функция [аргументы]

   Функция: представляет собой букву команды.

   Адрес: может быть номер строки, регулярное выражение, $(последняя
   строка).

   Если задается регулярное выражение, то оно задает все строки,
   соответствующие ему. Регулярное выражение берется в "/", то есть
   /regexp/.

   Если не заданы адреса, то обрабатываются все строки буфера.

   Адресный интервал - пара адресов, разделенная "," и включающая все
   строки, начиная со строки, соответствующей первому адресу, до строки,
   соответствующей второму адресу включительно. Если второй адрес -
   раньше первого, то обрабатывается первая строка, соответствующая
   первому адресу.

   При добавлении символа "!" после адресной спецификации ее смысл
   меняется на противоположный, то есть обрабатываются все строки, не
   лежащие в интервале.

   Пример: 1,4; 1,$; 2,6!.

                                Команды SED.

    1. Замена: s/regexp/replacement/flags. Где s - буква команды, regexp
       - строка поиска, то есть то, что заменится на replacement. Флаги:

   n - заменяем n-ое вхождение

   g - заменить все вхождения

   w file - записать изменения в файл

   q - выйти из sed без дальнейшей обработки

   p - после замены вывести строку на экран (обычно используется с -n). 

   Пример:

    1. sed `s/sun/moon/g' myfile
    2. sed `1,4 !s/sun/moon/g' myfile
    3. echo "Жужжали бабочки" | sed -n `s/\(жж\)\(али\)/Гуж<&>\2\1/p'

   Результат: ЖуГуж<жжали>алижж бабочки

    4. sed `/^Example/,/ED$/s/first/second/g - если несколько наборов
       строк, то редактируются все вхождения.
    5. sed `s/Sunday/Monday/gw changes'.

    2. Трансляция символов: y/source_chars/dest_chars/ - замена символов
       один к одному (строки должны быть одной длины).

   Пример: sed `y/abc/ABC/' file.

    3. Удаление строк: d.

   Пример:

    1. sed `4,5 d' file
    2. sed `/sun/!d' - удаление всех строк, кроме содержащих sun (по
       умолчанию одна строка).



   Вывод на экран: p - обычно используется с sed -n (иначе строки будут
   выводиться два раза).

   Пример: sed -n `/stroka/!p'.

    5. Запись в файл: w file - пишет буфер в файл.
    6. Вставка файла: r file - вставка в выходной поток файла. Если его
       нет, то вставляется файл нулевой длины (без ошибки).
    7. Вывод номеров строк: =
    8. Вставка строк: a - помещает за обрабатываемой строкой

   i - выводит до указанной строки.

   Примечание: a и i разрешают использовать только один адрес.

   Пример: cat script

   3 a\

   Здесь добавлена\

   строка

   who | sed -f script

   Результат: root

   stud1

   stud10

   Здесь добавлена

   строка

   stud11

   ...

    9. Замена строк: интервал с.

   Пример: `1,3 c \n Новая строка' - вместо первых трех вставит укзанную
   строку. По умолчанию - все строки.

   10. Разбиение строк: n.
   11. Метки: : имя

   b[метка] - безусловный переход

   t[метка] - переход, если успешно выполнилась последняя команда s.

   Если метки не указаны, то осуществляется переход на следующий цикл
   обработки.
