
                   Лекция No.4. Файловая система ОС UNIX.

   С точки зрения пользователя в ОС UNIX существует два типа объектов:
   файлы и процессы.

   Все данные хранятся в виде файлов, доступ к периферийным устройствам
   осуществляется через чтение/запись в специальные файлы.

   При запуске программы ядро загружает соответствующий исполняемый файл,
   создает образ процесса и передает ему управление.

   Во время выполнения процесс может считывать или писать данные в файл.
   С другой стороны, вся функциональность ОС определяется выполнением
   соответствующих процессов.

   Таким образом, понятия файловой системы и процессов тесно
   взаимосвязаны.

                             Файловая система.

   В UNIX файлы организованы в виде древовидной структуры (дерева),
   называемой файловой системой (FS).

   Каждый файл имеет имя, определяющее его расположение в дереве FS.

   Конем дерева является корневой каталог (root directory), имеющий имя
   "/".

   Имена всех файлов, кроме "/", содержат путь - список каталогов,
   которые надо пройти, чтобы достичь файла.

   Все доступное файловое пространство объединено в единое дерево
   каталогов, корнем которого является каталог "/". Таким образом, полное
   имя любого файла начинается с "/". Полное имя файла не содержит
   идентификатора устройства (HDD, CD-ROM или удаленного компьютера в
   сети), на котором он фактически находится. Символ "/" является
   разделителем в структуре каталогов.

   Каждый файл имеет связанные с ним метаданные (хранящиеся в индексных
   дескрипторах - inode), содержащие все характеристики файла и
   позволяющие ОС выполнять операции над ним.

   0x08 graphic
   0x08 graphic

   0x08 graphic

   Метаданные хранят права доступа, владельца-пользователя и
   владельца-группу, указатели на дисковые блоки, хранящие данные. В
   метаданных нет сведений об имени файла.

   Типы файлов.

   В UNIX существует шесть типов файлов, различающихся по строение и
   поведению при выполнении операций над ними:

    1. Обычный файл (regular file).

   Это наиболее общий тип файлов, содержащий данные в некотором формате.
   Для ОС это просто последовательность байт. Интерпретация содержимого
   производится прикладной задачей.

   Пример: текстовый фаайл, двоичные данные, исполняемый файл. Их можно
   просматривать командами cat [имя] и less [имя].

    2. Каталог (directory).

   Это файл, содержащий имена находящихся в нем файлов, а также указатели
   на метаданные, позволяющие ОС производить операции над файлами.

   Каталоги определяют положение файла в дереве файловой системы, так как
   сам файл не содержит информации о своем местонахождении. Каталоги
   образуют дерево.

   Пример: /home/stud1

   0x08 graphic

   0x08 graphic

   0x08 graphic

   Для работы с каталогами используются команды: ls с ключами -a и -l,
   cd, mkdir, rm, rmdir, mv.

   Первые два байта в каждой строке каталога являются единственной связью
   между именем файла и его содержимым. Именно поэтому имя файла в
   каталоге называют связью. Оно связывает имя в иерархии каталогов с
   индексным дескриптором и, тем самым, с информацией.

    3. Специальный файл устройства (special device file).

   Обеспечивает доступ к физическому устройству. Различают символьные и
   блочные файлы устройств. Доступ к устройствам происходит путем
   открытия, чтения/записи в специальный файл устройства. Символьные
   файлы позволяют небуферизованный обмен данными (посимвольно), а
   блочные - обмен пакетами определенной длины - блоками. К некоторым
   устройствам доступ возможен как через символьные, так и через блочные
   файлы.

   Для создания файлов устройств используется команда mknod.

    4. FIFO или именованный канал (named pipe).

   Используется для связи между процессами. Подробно будет рассмотрен при
   описании системы межпроцессного взаимодействия. 

    5. Связь (link).

   Бывают жесткие и символические.

   Связь имени файла с его данными называется жесткой ссылкой (hard
   link). 

   Имена жестко связаны с метаданными и, соответственно, с данными файла,
   в то время, как файл существует независимо от того, как его называют в
   файловой системе. Такая система позволяет одному файлу иметь несколько
   имен в файловой системе.

   Пример: $pwd

   /home/stud1

   $ln first /home/stud2 | second - создание жесткой ссылки.

   Жесткие связи абсолютно равноправны.

   Файлы first и second будут отличатся только именем в файловой системе.
   Изменения, внесенные в любой из этих файлов, затронут и другой, так
   как они ссылаются на одни и те же данные. Даже при переносе файлов в
   другой каталог все равно они будут жестко связаны.

   /home/stud1 /home/stud2

   10245 . 12563 .

   12432 .. 12432 ..

     * file1.txt 12672 a.out

   0x08 graphic
   9675 dirl

   0x08 graphic
   0x08 graphic
   0x08 graphic
   0x08 graphic
   0x08 graphic

   19678 second

   0x08 graphic
   0x08 graphic

   0x08 graphic

   0x08 graphic
   0x08 graphic

   Файл существует в системе до тех пор, пока существует хотя бы одна
   жесткая связь, указывающая на него, то есть пока у него есть хотя бы
   одно имя. Например, простое удаления файла second не удаляет данные.
   Их можно достать через first.

   В выводе команды ls -l вторая колонка показывает количество жестких
   связей файла.

   Таким образом, жесткая связь не принадлежит к особому типу файлов, а
   является естественной формой связи имени файла с его метаданными.

   Особый тип связи - символическая связь, позволяющая косвенно
   адресовать файл, в отличие от жесткой, обращающейся напрямую.

   Пример: ln -s first /home/stud2/symfirst

   /home/stud1 /home/stud2

   10245 . 12563 .

   12432 .. 12432 ..

     * file1.txt 12672 a.out

   0x08 graphic
   0x08 graphic
   0x08 graphic
   9675 dirl

   0x08 graphic

   19678 report

   0x08 graphic
   0x08 graphic

   0x08 graphic

   0x08 graphic

   0x08 graphic
   0x08 graphic

   Физическое расположение файлов различно. Размер symfirst - длина имени
   файла, на который ссылается символическая связь.

   ОС работает с symfirst не так, как с обычным файлом: при обращении к
   нему появятся данные first.

    6. Сокет (socket).

   Используются для межпроцессного взаимодействия. Будут подробнее
   рассмотрены в соответствующей теме.

                        Структура файловой системы.

   Использование общепринятых имен файлов и структуры каталогов в
   UNIX-подобных ОС облегчает работу и перенос.

   Нарушение структуры ведет к нарушениям в работе.

   Корневой каталог "/" является основой FS. Все остальные файлы и
   каталоги располагаются в рамках структуры, порождаемой корневым
   каталогом.

   Абсолютное или полное имя файла определяет точное местонахождение
   файла в структуре файловой системы. Начинается с "/" (в корневом
   каталоге) и содержит полный путь подкаталогов, которые нужно пройти,
   чтобы достичь файла.

   Относительное имя определяет местонахождение файла через текущий
   каталог. Никогда не начинается с "/".

   Каталог-предок - это тот, который содержит другой каталог. Две точки
   (..) как имя каталога всегда относятся к каталогу, содержащему текущий
   каталог. Корневой каталог не имеет предка.

   Каталог, находящийся в другом каталоге, называется каталогом-потомком
   или подкаталогом.

   К текущему каталогу можно обратиться по имени (.). Например, ./file1.

   К своему домашнему каталогу пользователь может обратиться по имени ~
   (тильда). Например, ~/file.txt.

   Домашним или начальным каталогом называется область, котрая выделяется
   каждому пользователю и в которой он может хранить свои файлы и
   программы.

                             Основные каталоги.

    1. /bin - наиболее часто употребляемые файлы и утилиты.
    2. /dev - содержит специальные файлы устройств, являющиеся
       интерфейсом доступа к периферийным устройствам. Может содержать
       подкаталоги, группирующие устройства по типам. Например, /dev/dsk
       - доступ к дискам.
    3. /etc - системные конфигурационные файлы и утилиты. Иногда утилиты
       отсюда выносятся в /sbin и /usr/sbin.
    4. /lib - библиотеки Си и других языков программирования. Часть
       библиотек - в /usr/lib.
    5. /lost+found - <<каталог потерянных файлов>>, то есть потерявших
       свое имя при сбое, но существующих на диске.
    6. /mnt - для временного связывания (монтирования) физических
       файловых систем к корневой для получения единой структуры.
    7. /home - каталоги пользователей.
    8. /usr - /usr/bin - утилиты;

   /usr/include - заголовочные файлы Си;

   /usr/man - справочная система;

   /usr/local - дополнительные программы;

   /usr/share - файлы, разделяемые между различными программами.

    9. /var - временные файлы сервисных подсистем (печати, почты,
       новостей).
   10. /tmp - каталог временных файлов. Обычно открыт на запись для всех
       пользователей системы.

                             Владельцы файлов.

   Группой называется определенный список пользователей системы.

   Пользователь может быть членом нескольких групп, одна из которых
   является первичной, а остальные - дополнительными.

   /etc/passwd - список всех пользователей и их первичных групп;

   /etc/group - список всех групп и их дополнительных пользователей.

   В UNIX любой файл имеет двух владельцев:

    1. владельца-пользователя
    2. владельца-группу.

   При этом владелец-пользователь не обязательно принадлежит
   владельцу-группе.

   Команда ls -l выводит информацию о владельцах в третью и четвертую
   колонки. Для изменения владельцев используются команды:

   chown новый_влад. имя_файла. Например: chown sys something.doc.

   chgrp новый_влад. имя_файла. Например: chgrp adm something.doc.

   Сменить владельца-пользователя может либо текущий владелец, либо
   администратор (root). Сменить владельца-группу может либо
   владелец-пользователь для группу, к которой он сам принадлежит
   (POSIX), либо администратор.

                          Права доступа к файлам.

   У каждого файла существуют атрибуты, называемые правами доступа.

   В UNIX существует три базовых типа доступа:

   1) для владельца-пользователя -u

   2) для владельца-группы -g

    3. для всех остальных -o

   Для всех классов пользователей -а.

   В каждом из этих классов установлены три основных права доступа:

    1. право на чтение -r (read)
    2. право на запись -w (write)
    3. право на выполнение -x (execute)

   В первой колонке вывода команды ls -l можно просмотреть установленные
   права.

   Пример: ls -l

   -| r w -| r - -| r w x 1 stud1 students ... example.program

   0 1 2 3 4 5 6 7 8 9

   0 - тип файла: - обычный; d каталог; l символическая ссылка; c,b
   символьный/блочный файл устройств.

   1-3 - права доступа для владельца-пользователя.

   4-6 - права доступа для владельца-группы.

   7-9 - права доступа для остальных.

   Права может изменять владелец-пользователь и(или) администратор.

   0x08 graphic
   Для изменения прав доступа используется команда chmod:

   0x08 graphic
   0x08 graphic
   0x08 graphic
   0x08 graphic
   0x08 graphic
   0x08 graphic
   0x08 graphic
   0x08 graphic
   + добавить право к текущим

   Chmod файлы - отнять от текущих

   = обнулить и присвоить

   Пример:

    1. chmod a+w text - добавить разрешение писать всем пользователям;
    2. chmod go=r text - установить только одно право на чтение для всех
       кроме владельца-пользователя;
    3. chmod g+x-r program - добавить для группы право на выполнение и
       отнять у нее право читать;
    4. chmod u+w, og+r-w text2;

   Возможно также задание прав через числовой формат в восьмеричной
   системе счисления.

   0x08 graphic
   0x08 graphic

     * 0x08 graphic
       0x08 graphic
       0x08 graphic
       0x08 graphic
       0x08 graphic
       0x08 graphic
       0x08 graphic
       0x08 graphic
       0x08 graphic
       битовая структура

   0x08 graphic
   0x08 graphic
   0x08 graphic
   rwx r-x r-- rw-
   0x01 graphic
   0x01 graphic
   0x01 graphic
   0x01 graphic

   Пример: chmod 666 *.

                           Значение прав доступа.

   Для обычных фалов - очевидно: право на чтение надо, чтобы прочитать
   файл, право на запись, чтобы иметь возможность файл изменить, а право
   на выполнение, чтобы запустить программу или скрипт.

   Примечание: для успешного запуска скрипта необходимо установить
   атрибут r, чтобы командный интерпретатор мог построчно считывать текст
   скрипта.

   Для каталогов и символических связей интерпретация прав доступа
   проводится по-другому.

   Права символических связей контролируются целевым файлом, а на связи
   стоит 777. Для каталогов r позволяет получить имена (и только имена)
   файлов, находящихся в данном каталоге. X позволяет <<выполнить>>
   каталог, то есть заглянуть в метаданные и получить полную информацию о
   каталоге.

   Пример: chmod u+r-x dir1

   ls dir1 - выполнится

   ls -l dir1 - Permission denied

   cd dir1 - Permission denied (надо х).

   r и x для каталога действуют независимо (одно не требует другого).

   Пример: mkdir dark_dir

   chmod a-r+w dark_dir

   ld dark_dir -yes

   ls -l - no

   cat file1 - yes (заранее зная имя файла, можно обратиться к нему).

   Атрибут w должен быть установлен для того, чтобы можно было изменять
   каталог: создавать и удалять файлы.

   Для удаления файла из каталога достаточно иметь установленный атрибут
   w для каталога, в котором он находился, а права файла при этом не
   учитываются.

                     Последовательность проверки прав.

    1. если вы администратор (root), доступ разрешен. Права не
       проверяются.
    2. если операция запрашивается владельцем, идет проверка его прав. В
       соответствии с ними ему разрешается выполнение операции или нет.
    3. если операция запрашивается пользователем, входящим в группу,
       владеющую файлом, идет проверка его прав. Соответственно, он либо
       получает разрешение, либо нет.
    4. аналогично для всех остальных пользователей.

   Пример: ----rwr-- 2 stud1 students ... file1 - stud1 в доступе будет
   отказано, но он, как владелец, может в любой момент сменить права
   доступа.

                       Дополнительные атрибуты файла.

   Для обычных файлов:

   а) t - sticky bit (бит липучка)- сохранить образ выполняемого файла в
   памяти после выполнения;

   б) s - set UID, SUID - установить права у процесса, как у запущенного
   файла, а не как у пользователя, запустившего программу (по умолчанию);

   в) s - set GID, SGID - то же для группы;

   г) 1 - блокирование - в каждый момент времени с файлом может работать
   только одна задача.

   Для каталогов:

   а) t - пользователь может удалять только те файлы и каталоги, которыми
   владеет или имеет право на запись;

   б) для создаваемых файлов группа-владелец наследуется от
   каталога-предка (а не от первичной группы пользователя, создающего
   файл).

   Дополнительные атрибуты также устанавливаются с помощью chmod.

                                    файл

                                   inode

   10245 .

   12432 ..

   8672 file1.txt

   12567 first

   19678 report

   Номер

   inode

   Имя файла

   12567 first

   12567 second

                                   12567

                             Метаданные (inode)

                                Данные файла

   12567 first

   19763 symfirst

   12567

   19763

   /home/stud1/first

   u

   g

   o

   a

   +

   -

   =

   r

   w

   x

   1

   1

   user

   group

   other
